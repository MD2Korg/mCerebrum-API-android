package org.md2k.mcerebrum.api.core.datakitapi;

import com.google.gson.internal.bind.DateTypeAdapter;

import org.md2k.mcerebrum.api.core.datakitapi.datasource.APPLICATION;
import org.md2k.mcerebrum.api.core.datakitapi.datasource.DATASOURCE;
import org.md2k.mcerebrum.api.core.datakitapi.datasource.PLATFORM;
import org.md2k.mcerebrum.api.core.datakitapi.datasource.PLATFORM_APP;
import org.md2k.mcerebrum.api.core.datakitapi.datatype.DataType;
import org.md2k.mcerebrum.api.core.datakitapi.status.MCerebrumStatus;

public class DataSourceAndroidUnitTest {
    final String[] dataSourceTypeArray = {DATASOURCE.TYPE.ACCELEROMETER, DATASOURCE.TYPE.GYROSCOPE,
            DATASOURCE.TYPE.COMPASS, DATASOURCE.TYPE.AMBIENT_LIGHT, DATASOURCE.TYPE.PRESSURE,
            DATASOURCE.TYPE.PROXIMITY, DATASOURCE.TYPE.LOCATION, DATASOURCE.TYPE.GEOFENCE,
            DATASOURCE.TYPE.DISTANCE, DATASOURCE.TYPE.HEART_RATE, DATASOURCE.TYPE.SPEED,
            DATASOURCE.TYPE.STEP_COUNT, DATASOURCE.TYPE.PACE, DATASOURCE.TYPE.MOTION_TYPE,
            DATASOURCE.TYPE.ULTRA_VIOLET_RADIATION, DATASOURCE.TYPE.BAND_CONTACT, DATASOURCE.TYPE.CALORY_BURN,
            DATASOURCE.TYPE.ECG, DATASOURCE.TYPE.RESPIRATION, DATASOURCE.TYPE.RESPIRATION_BASELINE,
            DATASOURCE.TYPE.RESPIRATION_RAW, DATASOURCE.TYPE.ALTIMETER, DATASOURCE.TYPE.AIR_PRESSURE,
            DATASOURCE.TYPE.RR_INTERVAL, DATASOURCE.TYPE.AMBIENT_TEMPERATURE, DATASOURCE.TYPE.SKIN_TEMPERATURE,
            DATASOURCE.TYPE.BATTERY, DATASOURCE.TYPE.CPU, DATASOURCE.TYPE.MEMORY, DATASOURCE.TYPE.AUTOSENSE,
            DATASOURCE.TYPE.ACCELEROMETER_X, DATASOURCE.TYPE.ACCELEROMETER_Y, DATASOURCE.TYPE.ACCELEROMETER_Z,
            DATASOURCE.TYPE.GYROSCOPE_X, DATASOURCE.TYPE.GYROSCOPE_Y, DATASOURCE.TYPE.GYROSCOPE_Z,
            DATASOURCE.TYPE.EMA, DATASOURCE.TYPE.STATUS, DATASOURCE.TYPE.LOG, DATASOURCE.TYPE.TIMEZONE,
            DATASOURCE.TYPE.PRIVACY, DATASOURCE.TYPE.STUDY_INFO, DATASOURCE.TYPE.USER_INFO,
            DATASOURCE.TYPE.SLEEP, DATASOURCE.TYPE.WAKEUP, DATASOURCE.TYPE.DAY_START, DATASOURCE.TYPE.DAY_END,
            DATASOURCE.TYPE.STRESS_PROBABILITY, DATASOURCE.TYPE.STRESS_LABEL, DATASOURCE.TYPE.STUDY_START,
            DATASOURCE.TYPE.STUDY_END, DATASOURCE.TYPE.STRESS_ACTIVITY, DATASOURCE.TYPE.CSTRESS_FEATURE_VECTOR,
            DATASOURCE.TYPE.ORG_MD2K_CSTRESS_DATA_RIP_QUALITY, DATASOURCE.TYPE.ORG_MD2K_CSTRESS_DATA_ECG_QUALITY,
            DATASOURCE.TYPE.ORG_MD2K_CSTRESS_STRESS_EPISODE_CLASSIFICATION,
            DATASOURCE.TYPE.ORG_MD2K_CSTRESS_STRESS_EPISODE_ARRAY_CLASSIFICATION_FULL_EPISODE,
            DATASOURCE.TYPE.ORG_MD2K_CSTRESS_STRESS_EPISODE_START, DATASOURCE.TYPE.ORG_MD2K_CSTRESS_STRESS_EPISODE_PEAK,
            DATASOURCE.TYPE.ORG_MD2K_CSTRESS_STRESS_EPISODE_END, DATASOURCE.TYPE.CSTRESS_FEATURE_VECTOR_RIP,
            DATASOURCE.TYPE.STRESS_RIP_PROBABILITY, DATASOURCE.TYPE.STRESS_RIP_LABEL, DATASOURCE.TYPE.ACTIVITY,
            DATASOURCE.TYPE.PUFF_PROBABILITY, DATASOURCE.TYPE.PUFF_LABEL, DATASOURCE.TYPE.PUFFMARKER_FEATURE_VECTOR,
            DATASOURCE.TYPE.PUFFMARKER_SMOKING_EPISODE, DATASOURCE.TYPE.NOTIFICATION_REQUEST,
            DATASOURCE.TYPE.NOTIFICATION_ACKNOWLEDGE, DATASOURCE.TYPE.NOTIFICATION_RESPONSE,
            DATASOURCE.TYPE.DATA_QUALITY, DATASOURCE.TYPE.DATA_VARIANCE, DATASOURCE.TYPE.TYPE_OF_DAY,
            DATASOURCE.TYPE.EVENT, DATASOURCE.TYPE.INCENTIVE, DATASOURCE.TYPE.BLOOD_PRESSURE,
            DATASOURCE.TYPE.WEIGHT, DATASOURCE.TYPE.ORALB_PRESSURE, DATASOURCE.TYPE.ORALB_CONNECTION,
            DATASOURCE.TYPE.ORALB_SECTOR, DATASOURCE.TYPE.ORALB_BRUSHING_MODE,
            DATASOURCE.TYPE.ORALB_BRUSHING_STATE, DATASOURCE.TYPE.ORALB_BUSHING_TIME,
            DATASOURCE.TYPE.ACTIVITY_TYPE, DATASOURCE.TYPE.LED, DATASOURCE.TYPE.SEQUENCE_NUMBER,
            DATASOURCE.TYPE.SMOKING, DATASOURCE.TYPE.RAW, DATASOURCE.TYPE.POST_QUIT,
            DATASOURCE.TYPE.PRE_QUIT, DATASOURCE.TYPE.BEACON, DATASOURCE.TYPE.DATA_QUALITY_SUMMARY_MINUTE,
            DATASOURCE.TYPE.DATA_QUALITY_SUMMARY_HOUR, DATASOURCE.TYPE.DATA_QUALITY_SUMMARY_DAY,
            DATASOURCE.TYPE.GALVANIC_SKIN_RESPONSE, DATASOURCE.TYPE.TOUCH_SCREEN,
            DATASOURCE.TYPE.WORK_ANNOTATION, DATASOURCE.TYPE.CU_IS_SCREEN_ON,
            DATASOURCE.TYPE.CU_AUDIO_FEATURE, DATASOURCE.TYPE.CU_AUDIO_ENERGY,
            DATASOURCE.TYPE.CU_AUDIO_INFERENCE, DATASOURCE.TYPE.CU_APPUSAGE, DATASOURCE.TYPE.CU_SMS_NUMBER,
            DATASOURCE.TYPE.CU_SMS_TYPE, DATASOURCE.TYPE.CU_SMS_LENGTH, DATASOURCE.TYPE.CU_CALL_NUMBER,
            DATASOURCE.TYPE.CU_SMS_TYPE, DATASOURCE.TYPE.CU_CALL_DURATION, DATASOURCE.TYPE.LABEL,
            DATASOURCE.TYPE.MAGNETOMETER, DATASOURCE.TYPE.QUATERNION, DATASOURCE.TYPE.MAGNETOMETER_SENSITIVITY,
            DATASOURCE.TYPE.ORALB_BRUSHING_TIME, DATASOURCE.TYPE.ORALB_BRUSH_ACCELEROMETER};
    final String[] dataSourceIdArray = {DATASOURCE.ID.SMOKING, DATASOURCE.ID.EATING, DATASOURCE.ID.SELF_REPORT};
    final String[] platformTypeArray = {PLATFORM.TYPE.AUTOSENSE_CHEST, PLATFORM.TYPE.AUTOSENSE_BLE,
            PLATFORM.TYPE.AUTOSENSE_WRIST, PLATFORM.TYPE.MICROSOFT_BAND, PLATFORM.TYPE.PHONE,
            PLATFORM.TYPE.OMRON_BLOOD_PRESSURE, PLATFORM.TYPE.OMRON_WEIGHT_SCALE, PLATFORM.TYPE.EASYSENSE,
            PLATFORM.TYPE.MOTION_SENSE, PLATFORM.TYPE.MOTION_SENSE_HRV, PLATFORM.TYPE.MOTION_SENSE_HRV_PLUS,
            PLATFORM.TYPE.ORALB_BRUSH, PLATFORM.TYPE.BEACON};
    final String[] platformIdArray = {PLATFORM.ID.CHEST, PLATFORM.ID.LEFT_WRIST, PLATFORM.ID.RIGHT_WRIST};
    final String[] platformAppTypeArray = {PLATFORM_APP.TYPE.AUTOSENSE_CHEST, PLATFORM_APP.TYPE.AUTOSENSE_BLE,
            PLATFORM_APP.TYPE.AUTOSENSE_WRIST, PLATFORM_APP.TYPE.MICROSOFT_BAND, PLATFORM_APP.TYPE.PHONE,
            PLATFORM_APP.TYPE.OMRON_BLOOD_PRESSURE, PLATFORM_APP.TYPE.OMRON_WEIGHT_SCALE,
            PLATFORM_APP.TYPE.EASYSENSE, PLATFORM_APP.TYPE.MOTION_SENSE, PLATFORM_APP.TYPE.MOTION_SENSE_HRV,
            PLATFORM_APP.TYPE.MOTION_SENSE_HRV_PLUS, PLATFORM_APP.TYPE.ORALB_BRUSH, PLATFORM_APP.TYPE.BEACON};
    final String[] platformAppIdArray = {PLATFORM_APP.ID.CHEST, PLATFORM_APP.ID.LEFT_WRIST, PLATFORM_APP.ID.RIGHT_WRIST};
    final String[] applicationTypeArray = {APPLICATION.TYPE.SENSE, APPLICATION.TYPE.ANALYZE, APPLICATION.TYPE.ACT};
    final String[] applicationIdArray = {};
    PlatformMetaData;
    PlatformAppMetaData;
    ApplicationMetaData;
    DataDescriptor;
    // TODO: final String[] dataTypeArray = {};
    DataRate;
    AppId;
    DsId;
    final long creationTime = 1268669453;
    final long modifiedTime = 1268660460;
    final int[] statusIntArray = {MCerebrumStatus.UNKNOWN_ERROR, MCerebrumStatus.SUCCESS,
            MCerebrumStatus.MCEREBRUM_API_NOT_INITIALIZED, MCerebrumStatus.MCEREBRUM_APP_NOT_INSTALLED,
            MCerebrumStatus.CONNECTION_ERROR, MCerebrumStatus.INVALID_PARAMETER,
            MCerebrumStatus.INVALID_DATA_SOURCE, MCerebrumStatus.MISSING_DATA_SOURCE_TYPE,
            MCerebrumStatus.MISSING_DATA_TYPE, MCerebrumStatus.DATA_SOURCE_NOT_REGISTERED,
            MCerebrumStatus.INVALID_DATA, MCerebrumStatus.INCONSISTENT_DATA_TYPE,
            MCerebrumStatus.INVALID_TIMESTAMP, MCerebrumStatus.DATA_SIZE_TOO_LARGE};
    final String[] statusStringArray = {MCerebrumStatus.getStatusCodeString(MCerebrumStatus.UNKNOWN_ERROR),
            MCerebrumStatus.getStatusCodeString(MCerebrumStatus.SUCCESS),
            MCerebrumStatus.getStatusCodeString(MCerebrumStatus.MCEREBRUM_API_NOT_INITIALIZED),
            MCerebrumStatus.getStatusCodeString(MCerebrumStatus.MCEREBRUM_APP_NOT_INSTALLED),
            MCerebrumStatus.getStatusCodeString(MCerebrumStatus.CONNECTION_ERROR),
            MCerebrumStatus.getStatusCodeString(MCerebrumStatus.INVALID_PARAMETER),
            MCerebrumStatus.getStatusCodeString(MCerebrumStatus.INVALID_DATA_SOURCE),
            MCerebrumStatus.getStatusCodeString(MCerebrumStatus.MISSING_DATA_SOURCE_TYPE),
            MCerebrumStatus.getStatusCodeString(MCerebrumStatus.MISSING_DATA_TYPE),
            MCerebrumStatus.getStatusCodeString(MCerebrumStatus.DATA_SOURCE_NOT_REGISTERED),
            MCerebrumStatus.getStatusCodeString(MCerebrumStatus.INVALID_DATA),
            MCerebrumStatus.getStatusCodeString(MCerebrumStatus.INCONSISTENT_DATA_TYPE),
            MCerebrumStatus.getStatusCodeString(MCerebrumStatus.INVALID_TIMESTAMP),
            MCerebrumStatus.getStatusCodeString(MCerebrumStatus.DATA_SIZE_TOO_LARGE)};
}
